// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repositories;

#nullable disable

namespace MvcUIApp.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240109091726_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("category_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 7, 9, 17, 26, 935, DateTimeKind.Utc).AddTicks(5650),
                            Name = "Sebze",
                            Status = true,
                            UpdatedAt = new DateTime(2024, 1, 8, 9, 17, 26, 935, DateTimeKind.Utc).AddTicks(5660)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 5, 9, 17, 26, 935, DateTimeKind.Utc).AddTicks(5660),
                            Name = "Meyve",
                            Status = true,
                            UpdatedAt = new DateTime(2024, 1, 6, 9, 17, 26, 935, DateTimeKind.Utc).AddTicks(5660)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 6, 9, 17, 26, 935, DateTimeKind.Utc).AddTicks(5660),
                            Name = "Yeşillik",
                            Status = true
                        });
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("img/default.png")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<bool>("ShowCase")
                        .HasColumnType("boolean")
                        .HasColumnName("show_case");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_price");

                    b.Property<decimal>("UnitsInStock")
                        .HasColumnType("numeric")
                        .HasColumnName("units_in_stock");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 1, 4, 9, 17, 26, 935, DateTimeKind.Utc).AddTicks(6750),
                            ImageUrl = "img/default.png",
                            Name = "Elma",
                            ShowCase = true,
                            UnitPrice = 29m,
                            UnitsInStock = 40m,
                            UpdatedAt = new DateTime(2024, 1, 6, 9, 17, 26, 935, DateTimeKind.Utc).AddTicks(6750)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 1, 2, 9, 17, 26, 935, DateTimeKind.Utc).AddTicks(6760),
                            ImageUrl = "img/default.png",
                            Name = "Portakal",
                            ShowCase = true,
                            UnitPrice = 19m,
                            UnitsInStock = 50m,
                            UpdatedAt = new DateTime(2024, 1, 5, 9, 17, 26, 935, DateTimeKind.Utc).AddTicks(6760)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 12, 30, 9, 17, 26, 935, DateTimeKind.Utc).AddTicks(6760),
                            ImageUrl = "img/default.png",
                            Name = "Mandalina",
                            ShowCase = true,
                            UnitPrice = 19m,
                            UnitsInStock = 37m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 30, 9, 17, 26, 935, DateTimeKind.Utc).AddTicks(6760),
                            ImageUrl = "img/default.png",
                            Name = "Patlıcan",
                            ShowCase = true,
                            UnitPrice = 39m,
                            UnitsInStock = 107m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 1, 6, 9, 17, 26, 935, DateTimeKind.Utc).AddTicks(6760),
                            ImageUrl = "img/default.png",
                            Name = "Dolma biber",
                            ShowCase = true,
                            UnitPrice = 49m,
                            UnitsInStock = 87m
                        });
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
